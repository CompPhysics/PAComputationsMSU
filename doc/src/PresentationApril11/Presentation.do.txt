TITLE: Integrating a computational perspective in physics courses
AUTHOR: Danny Caballero, Sean Couch, Wade Fisher, Connor Glosser, Morten Hjorth-Jensen, Claire Kopenhafer, Brian O'Shea, and Carlo Piermarocchi
DATE: today


!split
===== Wouldn't it be cool if your mechanics students could reproduce results from a PRL? =====
!bblock

FIGURE: [figures/prl1.png, width=800 frac=0.5]

And perhaps even find errors?
!eblock
!bblock

FIGURE: [figures/prl2.png, width=700 frac=0.5]

!eblock

!split
===== Unique opportunities =====
!bblock
Computing competence represents a central element
in scientific problem solving, from basic education and research to
essentially almost all advanced problems in modern
societies.

Computing competence _enlarges the body of tools available to students_ and
scientists beyond classical tools and _allows for a more generic
handling of problems_. Focusing on algorithmic aspects _results in
deeper insights_ about scientific problems.


* Computing in basic physics courses allows us to bring important elements of scientific methods at a much earlier stage in our students' education.
* It gives the students skills and abilities that are asked for by society.
* It gives us as university teachers a unique opportunity to enhance students' insights about physics and how to solve scientific problems.
* Combined with a strong Physics Education Research group, MSU is in a unique position among Big Ten universities and, likely, the country.
!eblock


!split
===== Computing competence =====
!bblock
_Computing means solving scientific problems using all possible tools_, including symbolic computing, computers and numerical algorithms, and analytical paper and pencil solutions .

_Computing is about developing an understanding of the scientific method_ by enhancing algorithmic thinking when solving problems.

On the part of students, this competence involves being able to:

* understand how algorithms are used to solve mathematical problems,
* derive, verify, and implement algorithms,
* understand what can go wrong with algorithms,
* use these algorithms to construct reproducible scientific outcomes and to engage in science in ethical ways, and
* think algorithmically for the purposes of gaining deeper insights about scientific problems.
!eblock


!split
===== Better understanding of the scientific method =====
!bblock
All these elements are central for maturing and gaining a better understanding of the modern scientific process *per se*.

The power of the scientific method lies in identifying a given problem
as a special case of an abstract class of problems, identifying
general solution methods for this class of problems, and applying a
general method to the specific problem (applying means, in the case of
computing, calculations by pen and paper, symbolic computing, or
numerical computing by ready-made and/or self-written software). This
generic view on problems and methods is particularly important for
understanding how to apply available, generic software to solve a
particular problem.
!eblock




!split
===== Why should basic university education undergo a shift towards modern computing?  =====

* Algorithms involving pen and paper are traditionally aimed at what we often refer to as continuous models.
* Application of computers calls for approximate discrete models.
* Much of the development of _methods for continuous models are now being replaced by methods  for discrete models_ in science and industry, simply because _much larger classes of problems can be addressed_ with discrete models, often also by simpler and more generic methodologies.

*However, verification of algorithms and understanding their limitations requires much of the classical knowledge about continuous models.*

So, why should basic university education undergo a shift towards modern computing?

The impact of the computer on mathematics and science is tremendous: _science and industry now rely on solving mathematical problems through computing_.
* Computing can increase the relevance in education by solving more realistic problems earlier.
* Computing through programming can be excellent training of creativity.
* Computing can enhance the understanding of abstractions and generalization.
* Computing can decrease the need for special tricks and tedious algebra, and shifts the focus to problem definition, visualization, and "what if" discussions.



!split
=====  Examples of simple algorithms, initial value problems and proper scaling of equations =====
!bblock
 o Ordinary differential equations (ODE): RLC circuit
 o ODE: Classical pendulum
 o ODE: Solar system
 o and many more cases

Can use essentially the _same algorithms to solve these problems_, either some simple modified Euler algorithms or some Runge-Kutta class of algorithms or perhaps the so-called Verlet class of algorithms.  _Algorithms students use in one course can be reused in other courses_.
!eblock



!split
===== Mechanics and electromagnetism, initial value problems  =====
!bblock When properly scaled, these equations are essentially the same. Scaling is important.

Classical pendulum with damping and external force as it could appear in a mechanics course (PHY 321)
!bt
\[
  ml\frac{d^2\theta}{dt^2}+\nu\frac{d\theta}{dt}  +mgsin(\theta)=Acos(\omega t).
\]
!et
Easy to solve numerically and then visualize the solution.
Almost the same equation for an RLC circuit in the electromagnetism course (PHY 482)
!bt
\[
L\frac{d^2Q}{dt^2}+\frac{Q}{C}+R\frac{dQ}{dt}=Acos(\omega t).
\]
!et

!eblock


!split
===== Mechanics and electromagnetism, initial value problems and now proper scaling  =====
!bblock

Classical pendulum equations with damping and external force
!bt
\[
   \frac{d\theta}{d\hat{t}} =\hat{v},
\]
!et
and
!bt
\[
   \frac{d\hat{v}}{d\hat{t}} =Acos(\hat{\omega} \hat{t})-\hat{v}\xi-\sin(\theta),
\]
!et
with $\omega_0=\sqrt{g/l}$, $\hat{t}=\omega_0 t$ and $\xi = mg/\omega_0\nu$.

The RLC circuit
!bt
\[
   \frac{dQ}{d\hat{t}} =\hat{I},
\]
!et
and
!bt
\[
   \frac{d\hat{I}}{d\hat{t}} =Acos(\hat{\omega} \hat{t})-\hat{I}\xi-Q,
\]
!et
with $\omega_0=1/\sqrt{LC}$, $\hat{t}=\omega_0 t$ and $\xi = CR\omega_0$.

The equations are essentially the same. _Great potential for abstraction_.
!eblock




!split
=====  Other examples of simple algorithms that can be reused in many courses, two-point boundary value problems and scaling =====
!bblock
These physics examples can all be studied using almost the same types of algorithms, simple eigenvalue solvers and Gaussian elimination with the same starting matrix!

 o A buckling beam and Toeplitz matrices (mechanics and mathematical methods), eigenvalue problems
 o A particle in an infinite potential well, quantum eigenvalue problems
 o A particle (or two) in a general quantum well, quantum eigenvalue problems
 o Poisson's  equation in one dim, linear algebra (electromagnetism)
 o The diffusion equation in one dimension (Statistical Physics), linear algebra
 o and many other cases
!eblock



!split
===== A buckling beam, or a quantum mechanical particle in an infinite well =====
!bblock
This is a two-point boundary value problem
!bt
\[
R \frac{d^2 u(x)}{dx^2} = -F u(x),
\]
!et
where $u(x)$ is the vertical displacement, $R$ is a material specific constant, $F$ the force and $x \in [0,L]$ with $u(0)=u(L)=0$.

Scale equations with $x = \rho L$ and $\rho \in [0,1]$ and get
!bt
\[
\frac{d^2 v(\rho)}{dx^2} +K v(\rho)=0,
\]
!et
a standard eigenvalue problem with $K= FL^2/R$.

If you replace $R=-\hbar^2/2m$ and $-F=\lambda$, we have the quantum mechanical variant for a particle moving in a well with infinite walls at the endpoints.
!eblock

!split
===== Discretize and get the same type of problem  =====
!bblock
Discretize the second derivative and the rhs
!bt
\[
    -\frac{v_{i+1} -2v_i +v_{i-i}}{h^2}=\lambda v_i,
\]
!et
with $i=1,2,\dots, n$. We need to add to this system the two boundary conditions $v(0) =v_0$ and $v(1) = v_{n+1}$.
The so-called Toeplitz matrix (special case from the discretized second derivative)
!bt
\[
    \mathbf{A} = \frac{1}{h^2}\left(\begin{array}{cccccc}
                          2 & -1 &  &   &  & \\
                          -1 & 2 & -1 & & & \\
                           & -1 & 2 & -1 & &  \\
                           & \dots   & \dots &\dots   &\dots & \dots \\
                           &   &  &-1  &2& -1 \\
                           &    &  &   &-1 & 2 \\
                      \end{array} \right)
\]
!et
with the corresponding vectors $\mathbf{v} = (v_1, v_2, \dots,v_n)^T$ allows us to rewrite the differential equation
including the boundary conditions as a standard eigenvalue problem
!bt
\[
   \mathbf{A}\mathbf{u} = \lambda\mathbf{v}.
\]
!et
The Toeplitz matrix has analytical eigenpairs!! Adding a potential along the diagonals allows us to reuse this problem for many types of physics cases.
!eblock


!split
===== Adding complexity, hydrogen-like atoms or other one-particle potentials  =====
!bblock
We are first interested in the solution of the radial part of Schroedinger's equation for one electron. This equation reads
!bt
\[
  -\frac{\hbar^2}{2 m} \left ( \frac{1}{r^2} \frac{d}{dr} r^2
  \frac{d}{dr} - \frac{l (l + 1)}{r^2} \right )R(r)
     + V(r) R(r) = E R(r).
\]
!et
Suppose in our  case $V(r)$ is the harmonic oscillator potential $(1/2)kr^2$ with
$k=m\omega^2$ and $E$ is
the energy of the harmonic oscillator in three dimensions.
The oscillator frequency is $\omega$ and the energies are
!bt
\[
E_{nl}=  \hbar \omega \left(2n+l+\frac{3}{2}\right),
\]
!et
with $n=0,1,2,\dots$ and $l=0,1,2,\dots$.
!eblock


!split
===== Radial Schroedinger equation  =====
!bblock
Since we have made a transformation to spherical coordinates it means that
$r\in [0,\infty)$.
The quantum number
$l$ is the orbital momentum of the electron.   Then we substitute $R(r) = (1/r) u(r)$ and obtain
!bt
\[
  -\frac{\hbar^2}{2 m} \frac{d^2}{dr^2} u(r)
       + \left ( V(r) + \frac{l (l + 1)}{r^2}\frac{\hbar^2}{2 m}
                                    \right ) u(r)  = E u(r) .
\]
!et
The boundary conditions are $u(0)=0$ and $u(\infty)=0$.
!eblock


!split
===== Scaling the equations  =====
!bblock
We introduce a dimensionless variable $\rho = (1/\alpha) r$
where $\alpha$ is a constant with dimension length and get
!bt
\[
  -\frac{\hbar^2}{2 m \alpha^2} \frac{d^2}{d\rho^2} u(\rho)
       + \left ( V(\rho) + \frac{l (l + 1)}{\rho^2}
         \frac{\hbar^2}{2 m\alpha^2} \right ) u(\rho)  = E u(\rho) .
\]
!et
In project 2 we choose $l=0$.
Inserting $V(\rho) = (1/2) k \alpha^2\rho^2$ we end up with
!bt
\[
  -\frac{\hbar^2}{2 m \alpha^2} \frac{d^2}{d\rho^2} u(\rho)
       + \frac{k}{2} \alpha^2\rho^2u(\rho)  = E u(\rho) .
\]
!et
We multiply thereafter with $2m\alpha^2/\hbar^2$ on both sides and obtain
!bt
\[
  -\frac{d^2}{d\rho^2} u(\rho)
       + \frac{mk}{\hbar^2} \alpha^4\rho^2u(\rho)  = \frac{2m\alpha^2}{\hbar^2}E u(\rho) .
\]
!et
!eblock


!split
===== A natural length scale comes out automagically when scaling =====
!bblock
We have thus
!bt
\[
  -\frac{d^2}{d\rho^2} u(\rho)
       + \frac{mk}{\hbar^2} \alpha^4\rho^2u(\rho)  = \frac{2m\alpha^2}{\hbar^2}E u(\rho) .
\]
!et
The constant $\alpha$ can now be fixed
so that
!bt
\[
\frac{mk}{\hbar^2} \alpha^4 = 1,
\]
!et
and it defines a natural length scale (like the Bohr radius does)
!bt
\[
\alpha = \left(\frac{\hbar^2}{mk}\right)^{1/4}.
\]
!et
Defining
!bt
\[
\lambda = \frac{2m\alpha^2}{\hbar^2}E,
\]
!et
we can rewrite Schroedinger's equation as
!bt
\[
  -\frac{d^2}{d\rho^2} u(\rho) + \rho^2u(\rho)  = \lambda u(\rho) .
\]
!et
This is similar to the equation for a buckling beam.
In three dimensions
the eigenvalues for $l=0$ are
$\lambda_0=1.5,\lambda_1=3.5,\lambda_2=5.5,\dots .$
!eblock



!split
===== Discretizing =====
!bblock
Define first the diagonal matrix element
!bt
\[
   d_i=\frac{2}{h^2}+V_i,
\]
!et
and the non-diagonal matrix element
!bt
\[
   e_i=-\frac{1}{h^2}.
\]
!et
In this case the non-diagonal matrix elements are given by a mere constant. *All non-diagonal matrix elements are equal*.

With these definitions the Schroedinger equation takes the following form
!bt
\[
d_iu_i+e_{i-1}u_{i-1}+e_{i+1}u_{i+1}  = \lambda u_i,
\]
!et
where $u_i$ is unknown. We can write the
latter equation as a matrix eigenvalue problem
!bt
\begin{equation}
    \left( \begin{array}{ccccccc} d_1 & e_1 & 0   & 0    & \dots  &0     & 0 \\
                                e_1 & d_2 & e_2 & 0    & \dots  &0     &0 \\
                                0   & e_2 & d_3 & e_3  &0       &\dots & 0\\
                                \dots  & \dots & \dots & \dots  &\dots      &\dots & \dots\\
                                0   & \dots & \dots & \dots  &\dots       &d_{n_{\mathrm{step}}-2} & e_{n_{\mathrm{step}}-1}\\
                                0   & \dots & \dots & \dots  &\dots       &e_{n_{\mathrm{step}}-1} & d_{n_{\mathrm{step}}-1}

             \end{array} \right)      \left( \begin{array}{c} u_{1} \\
                                                              u_{2} \\
                                                              \dots\\ \dots\\ \dots\\
                                                              u_{n_{\mathrm{step}}-1}
             \end{array} \right)=\lambda \left( \begin{array}{c} u_{1} \\
                                                              u_{2} \\
                                                              \dots\\ \dots\\ \dots\\
                                                              u_{n_{\mathrm{step}}-1}
             \end{array} \right)
      label{eq:sematrix}
\end{equation}
!et
or if we wish to be more detailed, we can write the tridiagonal matrix as
!bt
\begin{equation}
    \left( \begin{array}{ccccccc} \frac{2}{h^2}+V_1 & -\frac{1}{h^2} & 0   & 0    & \dots  &0     & 0 \\
                                -\frac{1}{h^2} & \frac{2}{h^2}+V_2 & -\frac{1}{h^2} & 0    & \dots  &0     &0 \\
                                0   & -\frac{1}{h^2} & \frac{2}{h^2}+V_3 & -\frac{1}{h^2}  &0       &\dots & 0\\
                                \dots  & \dots & \dots & \dots  &\dots      &\dots & \dots\\
                                0   & \dots & \dots & \dots  &\dots       &\frac{2}{h^2}+V_{n_{\mathrm{step}}-2} & -\frac{1}{h^2}\\
                                0   & \dots & \dots & \dots  &\dots       &-\frac{1}{h^2} & \frac{2}{h^2}+V_{n_{\mathrm{step}}-1}

             \end{array} \right)
label{eq:matrixse}
\end{equation}
!et
Recall that the solutions are known via the boundary conditions at
$i=n_{\mathrm{step}}$ and at the other end point, that is for  $\rho_0$.
The solution is zero in both cases.
!eblock


!split
===== The Python code =====
The code sets up the Hamiltonian matrix by defining the minimun and maximum values of $r$ with a
maximum value of integration points. It plots the
eigenfunctions of the three lowest eigenstates.
!bc pyscpro
#Program which solves the one-particle Schrodinger equation
#for a potential specified in function
#potential().

from  matplotlib import pyplot as plt
import numpy as np
#Function for initialization of parameters
def initialize():
    RMin = 0.0
    RMax = 10.0
    lOrbital = 0
    Dim = 400
    return RMin, RMax, lOrbital, Dim
# Different types of potentials
def potential(r):
    return 0.5*r*r
    #  return 0.0
    #  return -1.0/r
    #if r >= 0.0 and r <= 10.0:
    #    V = -0.05
    #else:
    #    V =0.0
    #return V

#Get the boundary, orbital momentum and number of integration points
RMin, RMax, lOrbital, Dim = initialize()

#Initialize constants
Step    = RMax/(Dim+1)
DiagConst = 1.0/ (Step*Step)
NondiagConst =  -0.5 / (Step*Step)
OrbitalFactor = 0.5*lOrbital * (lOrbital + 1.0)

#Calculate array of potential values
v = np.zeros(Dim)
r = np.linspace(RMin,RMax,Dim)
for i in xrange(Dim):
    r[i] = RMin + (i+1) * Step;
    v[i] = potential(r[i]) + OrbitalFactor/(r[i]*r[i]);

#Setting up a tridiagonal matrix and finding eigenvectors and eigenvalues
Matrix = np.zeros((Dim,Dim))
Matrix[0,0] = DiagConst + v[0];
Matrix[0,1] = NondiagConst;
for i in xrange(1,Dim-1):
    Matrix[i,i-1]  = NondiagConst;
    Matrix[i,i]    = DiagConst + v[i];
    Matrix[i,i+1]  = NondiagConst;
Matrix[Dim-1,Dim-2] = NondiagConst;
Matrix[Dim-1,Dim-1] = DiagConst + v[Dim-1];
# diagonalize and obtain eigenvalues, not necessarily sorted
EigValues, EigVectors = np.linalg.eig(Matrix)
# sort eigenvectors and eigenvalues
permute = EigValues.argsort()
EigValues = EigValues[permute]
EigVectors = EigVectors[:,permute]
# now plot the results for the three lowest lying eigenstates
for i in xrange(3):
    print EigValues[i]
FirstEigvector = EigVectors[:,0]
SecondEigvector = EigVectors[:,1]
ThirdEigvector = EigVectors[:,2]
plt.plot(r, FirstEigvector**2 ,'b-',r, SecondEigvector**2 ,'g-',r, ThirdEigvector**2 ,'r-')
plt.axis([0,4.6,0.0, 0.025])
plt.xlabel(r'$r$')
plt.ylabel(r'Radial probability $r^2|R(r)|^2$')
plt.title(r'Radial probability distributions for three lowest-lying states')
plt.savefig('eigenvector.pdf')
plt.show()
!ec

!split
===== The power of numerical methods =====
!bblock
The last example shows the potential of combining numerical algorithms with analytical results (or eventually symbolic calculations), allowing thereby students and teachers to

* make abstraction and explore other physics cases easily where no analytical solutions are known
* Validate and verify  their  algorithms.
* Including concepts like unit testing, one has the possibility to test and validate several or all parts of the code.
* Validation and verification are then included *naturally* and one can develop a better attitude to what is meant with an ethically sound scientific approach.
* The above example allows the student to also test the mathematical error of the algorithm for the eigenvalue solver by changing the number of integration points. The students get trained from day one to think error analysis.
* The algorithm can be tailored to any kind of one-particle problem used in quantum mechanics or eigenvalue problems
* A simple rewrite allows for reuse in linear algebra problems for solution of say Poisson's equation in electromagnetism, or the diffusion equation in one dimension.
* With an ipython notebook the students can keep exploring similar examples and turn them in as their own notebooks.

!eblock

!split
===== Proposal =====

!bblock

By early in the Fall 2017 term (in time to make any necessary curricular changes for the 2018-19 academic year), the committee (Danny Caballero, Sean Couch, Wade Fisher, Connor Glosser, Morten Hjorth-Jensen, Claire Kopenhafer, Brian O'Shea, and Carlo Piermarocchi) will present a document to the faculty of the Department of Physics and Astronomy that:

o outlines proposed learning outcomes relating to computational modeling and data analysis within the upper-division physics curriculum,
o offers a concrete and realistic plan of action that will allow us to attain these learning outcomes, and
o provides a plan to assess the progress of our efforts.

!eblock

!split
===== Process =====

!bblock

Prior to Fall 2017, the committee will pursue several goals.  We will:

o  Engage the faculty in the department to understand current best practices, to identify areas of concern, and to solicit ideas for desired learning outcomes and curriculum modifications.
o  Survey current undergraduate students to understand their experiences thus far and identify the types of training that they would like to receive with regards to these subjects.
o  Survey students who recently received a bachelor's degree in physics or astrophysics to identify what aspects of their education have been useful to them thus far, and what they would have liked to have learned while here at MSU.
o  Identify possible areas of collaboration with the Department of Computational Mathematics, Science and Engineering, and explore the possibility of more in-depth educational options (i.e., a computational physics degree).
o  Contact faculty at other institutions that have pursued similar reform efforts to learn about potential opportunities and pitfalls.
o  Synthesize the results obtained from the previous points into a coherent document that will be presented to the faculty for discussion.

!eblock
