TITLE: Computational Physics at the Physics and Astronomy Department, Michigan State University
AUTHOR: Danny Caballero, Sean Couch, Wade Fisher, Connor Glosser, Morten Hjorth-Jensen, Claire Kopenhafer, Brian O'Shea, and Carlo Piermarocchi
DATE: today


===== Introduction: Scientific and educational motivation =====

Numerical simulations of various systems in science are central to our
basic understanding of nature and technology.
The increase in computational power,
improved algorithms for solving problems in science as well as access
to high-performance facilities, allow researchers nowadays to study
complicated systems across many length and energy scales. Applications
span from studying quantum physical systems in nanotechnology and the
characteristics of new materials or subatomic physics at its smallest
length scale, to simulating galaxies and the evolution of the universe.
In between, simulations are key to understanding
cancer treatment and how the brain works,
predicting climate changes and this week's weather,
simulating natural disasters, semi-conductor devices,
quantum computers, as well as assessing risk in the insurance and
financial industry.


=== Computing competence ===

Computing means solving scientific problems using computers. It covers
numerical as well as symbolic computing. Computing is also about
developing an understanding of the scientific process by enhancing
algorithmic thinking when solving problems.  Computing competence has
always been a central part of education in the sciences and engineering disciplines.

On the part of students, this competence involves being able to:

* understand how algorithms are used to solve mathematical problems
* derive, verify, and implement important algorithms
* understand what can go wrong with algorithms
* use these algorithms to construct reproducible scientific outcomes and to engage in science in ethical ways
* think algorithmically for the purposes of gaining deeper insights about scientific problems

All these elements (and many more) are central for maturing and gaining a better understanding of the modern scientific process *per se*.

The power of the scientific method lies in identifying a given problem
as a special case of an abstract class of problems, identifying
general solution methods for this class of problems, and applying a
general method to the specific problem (applying means, in the case of
computing, calculations by pen and paper, symbolic computing, or
numerical computing by ready-made and/or self-written software). This
generic view on problems and methods is particularly important for
understanding how to apply available, generic software to solve a
particular problem.

Computing competence represents a central element
in scientific problem solving, from basic education and research to
essentially almost all advanced problems in modern
societies. Computing competence is simply central to further
progress. It enlarges the body of tools available to students and
scientists beyond classical tools and allows for a more generic
handling of problems. Focusing on algorithmic aspects results in
deeper insights about scientific problems.





=== Why should basic university education undergo a shift from classical mathematics to modern computing?  ===

* Algorithms involving pen and paper are traditionally aimed at what we often refer to as continuous models.
* Application of computers calls for approximate discrete models.
* Much of the development of methods for continuous models are now being replaced by methods  for discrete models in science and industry, simply because much larger classes of problems can be addressed with discrete models, often also by simpler and more generic methodologies.

However, verification of algorithms and understanding their limitations requires much of the classical knowledge about continuous models.

So, why should basic university education undergo a shift from classical mathematics to modern computing?

The impact of the computer on mathematics and science is tremendous: science and industry now rely on solving mathematical problems through computing.
* Computing increases the relevance in education by solving more realistic problems earlier.
* Computing through programming is excellent training of creativity.
* Computing enhances the understanding of abstractions and generalization.
* Computing decreases the need for special tricks and tedious algebra, and shifts the focus to problem definition, visualization, and "what if" discussions.


The result is a deeper understanding of mathematical modeling and the scientific method (we hope, and here our physics education research group can play a central role in promoting this).
Not only is computing via programming a very powerful tool, it can also be a great pedagogical aid.

For the mathematical training, there is one major new component among the arguments above: understanding abstractions and generalization. While many of the classical methods developed for continuous models are specialized for a particular problem or a narrow class of problems, computing-based algorithms are often developed for problems in a generic form and hence applicable to a large problem class.


Computing competence represents a central element in scientific problem solving, from basic education and research to essentially almost all advanced problems in modern societies. Computing competence is simply central to further progress. It enlarges the body of tools available to students and scientists beyond classical tools and allows for a more generic handling of problems. Focusing on algorithmic aspects results in deeper insights about scientific problems.

Today's projects in science and industry tend to involve larger teams. Tools for reliable collaboration must therefore be mastered (e.g., version control systems, automated computer experiments for reproducibility, software and method documentation).


===== General learning outcomes for computing competence =====

Below, we articulate high-level learning outcomes that we expect students to develop through comprehensive and coordinated instruction in numerical methods over the course of their bachelor's program at Michigan State. These learning outcomes are different from specific learning goals in that the former reference the end state that we aim for students to achieve. The latter references the specific knowledge, tools, and practices with which students should engage and discusses how we expect them to participate in that work. We reserve the discussion of specific learning goals to individual course experiences (e.g., Electrostatics).

=== Learning outcomes for numerical algorithms ===

Numerical algorithms forms the basis for solving science and engineering problems with computers. An understanding of algorithms does not itself serve as an understanding on computing, but it is a necessary step along the path. Through comprehensive and coordinated instruction, we aim for students to have developed:

* A deep understanding of the most fundamental algorithms for linear algebra, ordinary and partial differential equations, optimization, and statistical uncertainty quantification
* A working knowledge of advanced algorithms and how they can be accessed in available software
* A working knowledge of high-performance computing elements including memory usage, vectorized and parallel algorithms
* A deep understanding of approximation errors and how they can present themselves in different problems
* The ability to apply fundamental and advanced algorithms to classical model problems as well as real-world problems as well to assess the uncertainty of their results

=== Learning outcomes for symbolic computing ===

Symbolic computing is a helpful tool for addressing certain classes of problems where a functional representation of the solution (or part of the solution) is needed. Through engaging with symbolic computing platforms, we aim for students to have developed:

* A working knowledge of at least one computer algebra system (CAS)
* The ability to apply a CAS to perform classical mathematics including calculus, linear algebra, differential equations
* The ability to verify the results produced by the CAS using some other means

=== Learning outcomes for programming ===

Programming is a necessary aspect of learning computing for science and engineering. The specific languages and/or environments that students learn are less important than the nature of that learning (i.e., learning programming for the purposes of solving science problems). By numerically solving science problems, we expect students to have developed:

* An understanding of programming in a high-level language (e.g., MATLAB, Python, R).
* An understanding of programming in a compiled language (e.g., Fortran, C, C++).
* The ability to to implement and apply numerical algorithms in reusable software that acknowledges the generic nature of the mathematical algorithms.
* A working knowledge of basic software engineering elements including functions, classes, modules/libraries, testing procedures and frameworks, scripting for automated and reproducible experiments, documentation tools, and version control systems (e.g., GitHub).
* An understanding of debugging software, e.g., as part of implementing comprehensive tests.

=== Learning outcomes for verification ===

Verifying the model and the resulting outcomes it produces are essential elements to generating confidence in the model itself. Moreover, such verifications provide evidence that the work is reproducible. By engaging in verification practices, we aim for for students to develop:

* An understanding of how to program testing procedures
* A deep knowledge of testing/verification methods including the use of:
  * Exact solutions of numerical models
  * Method of manufactured solutions (i.e., choose solution and fit a problem)
  * Classical analytical solutions including asymptotic solutions
  * Computed asymptotic approximation errors (i.e., convergence rates)
  * Step-wise construction of tests to aid debugging.

=== Learning outcomes for mathematical modeling ===

Preparing a problem to be solved numerically (i.e., modeling) is a critical step in making progress towards an eventual solution. By providing opportunities for students engage in modeling, we aim for them to develop:

* The ability to solve real problems from applied sciences by:
  * Deriving computational models from basic principles in physics and articulating the underlying assumptions in those models,
  * Constructing models with dimensionless forms to reduce and simplify input data, and
  * Interpreting the model's dimensionless parameters to increase their understanding of the model and its predictions

=== Learning outcomes for presentation of results ===

The results of a computation need to be communicated in some format (i.e., through figures, posters, talks, and other forms of written communication). Computation affords the experience of presenting original results quite readily. Through their engagement with presentations for their findings, we aim for students to develop:

* The ability to make use of different visualization techniques for different types of computed data
* The ability to present computed results in scientific reports and oral presentations effectively
* A working knowledge of the norms and practices for scientific presentations in various formats (i.e., figures, posters, talks, and written reports)


What is deep knowledge?
By deep knowledge we here mean the understanding of the underlying fundamental ideas and concepts from which a plethora of seemingly different methods and technologies can be derived. In other words, the deep knowledge brings structure to all the technical details.
Obtaining this type of knowledge requires time in class and a lot of exercises. In addition, the students need to reflect about theory and practice. The reflection process is often difficult to implement. Below are some suggestions.
A useful concept is simplify, understand, and then generalize. Giving a superficial overview of a bunch of unrelated methods and their applications to unrelated scientific problems equips the students with a wide toolbox, but fails to enhance a fundamental understanding of how multidisciplinary topics play together. Instead, we believe in the following list.
 o Pick a few selected classes of problems,
 o start out with simplified models,
 o apply general, fundamental ideas to construct algorithms,
 o understand all details to correctly implement the algorithms,
 o understand how to judge the numerical quality of the algorithms,
 o understand how to verify that the computations are mathematically correct.

The verification process forces the student to reflect on all the points: What type of problem is actually solved? How can I test that the solution is right?
After obtaining an understanding of the simplified problem, one can generalize the models to real applications, but illustrate how the insight from the simplified models and methods gives very valuable knowledge when attacking the generalizations. The focus on simplified models help to detach the mathematics from a lot of discipline-dependent application details and cultivate the common mathematical and implementational ideas.
This philosophy is closely related to the key principle stated earlier:
 o solving a complicated problem first starts with the purpose of breaking up the problem into subtasks that belong to general classes of well-studied problems in mathematics,
 o each subproblem is understood with great help simplified models in that class,
 o and finally a synthesis of the subproblems can solve the original problem.


===== Possible learning outcomes =====


What follows here is a list of suggested learning outcomes. Not all may be relevant, but hopefully they can serve as
a way to spark off discussions.

The learning outcomes are subdivided in three general categories, knowledge, skills and general competence.

* _Knowledge_: A student with a degree in Physics

 * has deep knowledge of the scientific method meaning that the candidate

  o has the ability to understand advanced scientific results in new fields
  o has fundamental understanding of methods and tools
  o can develop and apply advanced computational methods to scientific problems
  o is capable of judging and analyzing all parts of the obtained scientific results
  o can present results orally and in written form as scientific reports/articles
  o can propose new hypotheses and suggest solution paths
  o can generalize mathematical algorithms and apply them to new situations
  o can link computational models to specific applications and/or experimental data
  o can develop models and algorithms to describe experimental data
  o masters methods for reproducibility and how to link this to a sound ethical scienfitic conduct
  o has a thorough understanding of how computing is used to  solve  scientific problems
  o knows fundamental algorithms in computational science

 * has a fundamental understanding and knowledge of scientific work, meaning that
  o the candidate can develop hypotheses and suggest ways to test these
  o can use relevant analytical, experimental and numerical tools and results to test the scientific hypotheses
  o can generalize from numerical and experimental data to mathematical models and underlying principles
  o can analyze the results and evaluate their relevance with respect to the actual problems and/or hypotheses
  o can present the results according to good scientific practices

* _Skills (mainly computational ones)_: A candidate
 * has a deep understanding of what computing means, entailing several or all of the topics listed below
  o knows the most fundamental algorithms involved (which algorithms should we focus on?)
  o has overview of advanced algorithms and how they can be accessed in available software and how they are used to solve scientific problems
  o has knowledge and understands high-performance computing elements: memory usage, vectorization and parallel algorithms
  o can use effeciently high-performance computing resources, from compilers to hardware architectures
  o understands approximation errors and what can go wrong with algorithms
  o has knowledge of at least one computer algebra system and how it is applied to perform classical mathematics
  o has extensive experience with programming in a high-level language (MATLAB, Python, R)
  o has experience with programming in a compiled language (Fortran, C, C++)
  o has experience with implementing and applying numerical algorithms in reusable software that acknowledges the generic nature of the mathematical algorithms
  o has experience with debugging software
  o has experience with test frameworks and procedures
  o has experience with different visualization techniques for different types of data
  o can critically evaluate results and errors
  o can develop algorithms and software for complicated scientific problems independently and in collaboration with other students
  o masters software carpentry: can design a maintainable program in a systematic way, use version control systems, and write scripts to automate manual work
  o understands how to increase the efficiency of numerical algorithms and pertinent software
  o has knowledge of stringent requirements to efficiency and precision of software
  o understands tools to make science reproducible and has a sound ethical approach to scientific problems

* _General competence_:

 * is able to develop professional competence, entailing:
  o mature professionally and be able to work independently
  o can communicate in a professional way scientific results, orally and in written form
  o can plan and complete a research project
  o can develop a scientific intuition and understanding that makes it possible to present and discuss scientific problems, results and uncertainties


 * is able to develop virtues, values and attitudes that lead to  a better understanding of ethical aspects of the scientific method, as well as promoting central aspects of the scientific method to society. This means for example that the candidate

  o can reflect on and develop strategies for making science reproducible and to promote the need for a proper ethical conduct
  o has a deep understanding of the role basic and applied  research and computing play for progress in society
  o is able to promote, use and develop version control tools in order to make science reproducible
  o is able to critically evaluate the consequences of own research and how this impacts society
  o matures an understanding of the links between basic and applied research and how these shape, in a fundamental way,  progress in science and technology
  o can develop an understading of the role research and science can play together with industry and society in general
  o can reflect over and develop learning strategies for life-long learning.


=====  Specific algorithms and computational skills =====

The above learning goals and outcomes are of a more generic character. What follows here are specific
algorithms that occur frequently in scientific problems. The implementation of these algorithms in various physics courses, together with problem and project solving, is a way to implement large fractions of the above learning goals.

We list also tools that are important in developing
numerical projects. These tools allow students to develop a better understanding of the scientific process as well, in addition to bring in a sound ethical approach to science.

The algorithms and tools listed here reflect to various degrees the previously discussed learning outcomes. They can be integrated to various degrees in the physics courses that we propose below here. Furthermore, several of these algorithms can be used and reused in the various courses. The ideal would also be that some of these algorithms have been presented in different mathematics courses.

=== Central algorithms ===
The following mathematical formulations of problems from the physical sciences play a prominent role and should be reflected in the way we teach physics:
 * Ordinary differential equations
   o Euler, modified Euler, Verlet and Runge-Kutta methods with applications to problems in electromagnetism, methods for theoretical physics, quantum mechanics and mechanics.
 * Partial differential equations
   o Diffusion in one and two dimensions (statistical physics), wave equation in one and two dimensions (mechanics, electromagnetism, quantum mechanics, methods for theoretical physics) and Laplace's and Poisson's equations (electromagnetism).
 * Numerical integration
   o Trapezoidal and Simpson's rule and Monte Carlo integration. Applications in statistical physics, methods of theoretical physics, electromagnetism and quantum mechanics.
 * Statistical analysis, random numbers, random walks, probability distributions, Monte Carlo integration and Metropolis algorithm. Applications to statistical physics and laboratory courses.
 * Linear Algebra and eigenvalue problems.
   o Gaussian elimination, LU-decomposition, eigenvalue solvers, and iterative methods like  Jacobi or Gauss-Seidel for systems of linear equations. Important for several courses, classical mechanics, methods of theoretical physics, electromagnetism and quantum mechanics.
 * Signal processing
   o Discrete (fast) Fourier transforms, Lagrange/spline/Fourier interpolation, numeric convolutions & circulant matrices, filtering. Applications in electromagnetics, quantum mechanics, and experimental physics (data acquisition)
 * Root finding techniques, used in methods for theoretical physics, quantum mechanics, electromagnetism and mechanics.

In order to achieve a proper pedagogical introduction of these algorithms, it is important that students and teachers alike see how these algorithms are used to solve a variety of physics problems. The same algorithm, for example the solution of a second-order differential equation, can be used to solve the equations for the classical pendulum in a mechanics course or the (with a suitable change of variables) equations for a coupled RLC circuit in the electromagnetism course. Similarly, if students develop a program for studies of celestial bodies in the mechanics course, many of the elements of such a program can be reused in a molecular dynamics calculation in a course on statistical physics and thermal physics. The two-point boundary value problem for a buckling beam
(discretized as an eigenvalue problem) can be reused in quantum mechanical studies of interacting electrons in oscillator traps, or just to study a particle in a box potential with varying depth and extension.

In order to aid the introduction of computational exercises and projects, we will need to develop educational resources for this. The "PICUP project":"http://www.compadre.org/picup/",  Partnership for Integration of Computation into Undergraduate Physics, develops "resources for teachers and students on the integration of computational  material":"http://www.compadre.org/PICUP/resources/".   We strongly recommend these resources.

As part of this proposal, we have developed several examples of problems and projects that can be included in our undergraduate courses in physics. You can click on the following links (ipython notebooks or PDF formats)
* Mechanics
  o  "Ipython notebook":"https://github.com/CompPhysics/PAComputationsMSU/tree/master/doc/pub/Mechanics/ipynb"
  o  "Standard PDF file":"https://github.com/CompPhysics/PAComputationsMSU/tree/master/doc/pub/Mechanics/pdf/Mechanics-minted.pdf"
* Quantum mechanics
  o  "Ipython notebook":"https://github.com/CompPhysics/PAComputationsMSU/tree/master/doc/pub/Quantum/ipynb"
  o  "Standard PDF file":"https://github.com/CompPhysics/PAComputationsMSU/tree/master/doc/pub/Quantum/pdf/Quantum-minted.pdf"
* Electromagnetism
  o  "Ipython notebook":"https://github.com/CompPhysics/PAComputationsMSU/tree/master/doc/pub/Elmag/ipynb"
  o  "Standard PDF file":"https://github.com/CompPhysics/PAComputationsMSU/tree/master/doc/pub/Elmag/pdf/Elmag-minted.pdf"
* Statistical and thermal physics
  o  "Ipython notebook":"https://github.com/CompPhysics/PAComputationsMSU/tree/master/doc/pub/StatPhys/ipynb"
  o  "Standard PDF file":"https://github.com/CompPhysics/PAComputationsMSU/tree/master/doc/pub/StatPhys/pdf/StatPhys-minted.pdf"
* Methods in Theoretical Physics (not yet ready)
  o  "Ipython notebook":"https://github.com/CompPhysics/PAComputationsMSU/tree/master/doc/pub/"
  o  "Standard PDF file":"https://github.com/CompPhysics/PAComputationsMSU/tree/master/doc/pub/"
* Physics laboratory (not yet ready)
  o  "Ipython notebook":"https://github.com/CompPhysics/PAComputationsMSU/tree/master/doc/pub/"
  o  "Standard PDF file":"https://github.com/CompPhysics/PAComputationsMSU/tree/master/doc/pub/"

=== Central tools and programming languages ===

We will strongly recommend that Python is used as programming language for all the courses proposed below. This means that students can apply their knowledge from CSE 201 and extend and add to their knowledge of programming in various physics classes. We recommend strongly that the following tools are used
 o "Jupyter and ipython notebook":"http://jupyter.org/".
 o Version control software like "git":"https://git-scm.com/" and repositories like "github":"https://github.com/"
 o Other typsetting tools like LaTeX.
 o Developing unit tests and using existing tools for unit tests. "Python has extensive tools for this":"https://docs.python.org/2/library/unittest.html"
 o Other high-level environments like Mathematica and Matlab can also be presented and offered as special courses like PHY102 - Physics Computations I.

The notebooks can be used to hand in exercises and projects and give the students a training in presenting their studies in the form of scientific/technical reports.

Version control software allows teachers to bring in naturally aspects like reproducibility of science as well as enhancing
collaborative efforts among students. Making science reproducible and ethical aspects linked with reproducibility can be easily implemented with proper usage of version control software. Using version control can also be used to train students in presenting benchmark results, allowing thereby for verification by others of their results.

Unit testing is a central element in the development of numerical projects, from microtests of code fragments, to intermediate merging of functions to final test of the correctness of a code.

=====  Proposed physics courses that could integrate a computational perspective =====

For a major in physics degree at Michigan State University, the course "CSE 201 Fundamentals of Information Technology":"https://www.cse.msu.edu/~cse201/" is compulsory and it lays the foundation for the insertion of computational exercises and projects in various physics courses.

We would like to propose that the following courses that aim at integrating the above learning outcomes and goals:

 * Classical Mechanics 1: PHY321.
   o Here one could focus on ordinary differential equations like modified Euler, Verlet and perhaps RK methods. There are several interesting problems that can deepen the understanding of newtonian problems, from modeling planetary motion to models for friction and earthquake simulations. With not too advanced programs one can easily bring in actual research problems (friction is a good example).  The classical pendulum is also a good case to illustrate. The code can easily be reused for studies of for example an RLC circuit in electromagnetism. The equations for a buckling beam lead to an eigenvalue problem which can reused in the quantum mechanics course.
 * Thermal and Statistical Physics, PHY410
   o Random numbers, random walks, probability distributions, Monte Carlo integration and Metropolis algorithm. Applications to statistical physics. Simulation of simple phase transitions with spin models like the Ising model.  Studies of Brownian motion and diffusion can easily be done.
 * Methods in Theoretical Physics, PHY415
   o Here one could discuss algorithms which are relevant for the other physics courses discussed here, such as particular eigenvalue solvers. Furthermore, when solving famous differential equations in physics, one can write functions to generate polynomials like Legendre, Laguerre, Hermite functions etc. Here it would be natural to discuss Gaussian quadrature and how to use this to integrate numerically.
 * Advanced Laboratory course in Physics PHY451
   o Data analysis plays a central role, natural to have algorithms on data fitting, computations  of mean values, variance and standard deviations, covariance, famous distributions. Many of these topics find also their natural place in a course on statistical physics like PHY410.
 * Quantum mechanics 1  PHY 471 (and possible extentions to Quantum mechanics 2 PHY 472)
   o Ordinary and partial differential equations, eigenvalue solvers and root finding methods. Can explore interacting two-electron problem with simple rewriting of for example harmonic oscillator problem. The Metropolis algorithm can be used to simulate one and two-body problems like the Helium atom using Variational Monte Carlo. Gives students a feeling for variational calculus which can be included and  taught in PHY415
 * Electromagnetism 1 PHY481 (and possible extensions to Electromagnetism 2 PHY482)
   o Both ordinary and partial differential equations with two-point boundary value problems. Central algorithms based on finite difference for one and two-dimensional wave equation and Poisson's and Laplace's equations. See "the detailed learning outcomes":"https://dannycab.github.io/phy481msu/learning_goals.html" for more information.


Question to us: Should we propose detailed learning outcomes as done by Danny?




===== Physics Education research and computing in science education =====

The introduction of computational elements in the various courses should be stronly integrated with ongoing research on physics education.

The Physics and Astronomy department at MSU is in a unique position due to its strong research group in physics education, the "PERL group":"http://www.pa.msu.edu/research/physics-education-lab".
This means that it is possible to
develop research motivated curricular changes.  There are many interesting challenges here, like
which are the main obstacles when transferring from a classical pen and paper approach to actually have a working program which solves the same (and more general problems). What is a good progression in presenting numerical topics in physics courses? Are there specific mathematical skills we would like our students to have? How do we integrate student-active teaching, how do we develop and test various assessment methods?



===== Links with CSME and Mathematics courses =====

We need to figure out, beyond CSE 201, if computational elements, or some of the abovementioned algorithms are included in the mathematics courses our physics students take.


===== Advanced computational physics courses =====

Towards the end of undergraduate studies it is useful to offer a course which focuses on more advanced algorithms and presents compiled languages like C++ and Fortran, languages our students will meet in actual research.
Furthemore, such a course, like the present "PHY480 Computational Physics":"https://github.com/CompPhysics/ComputationalPhysicsMSU" offers as well more advanced projects which train the students in actual research, developing more complicated programs and working on larger projects.
Such a course could cover
  * C++ and/or Fortran programming
  * Numerical derivation and integration
  * Random numbers and Monte Carlo integration
  * Monte Carlo methods in statistical physics
  * Quantum Monte Carlo methods
  * Linear algebra and eigenvalue problems
  * Non-linear equations and roots of polynomials
  * Ordinary differential equations
  * Partial differential equations
  * Parallelization of codes
  * High-performance computing aspects and optimization of codes


Then we should consider more advanced (at the graduate level) courses which could cover specialized topics.
These could be (presently some of this is covered by PHY905, sections 002 and 003)
  o  Computational quantum mechanics, spanning from Monte Carlo methods to other methods used in atomic, molecular, nuclear, condensed matter and high-energy physics
  o  Computational Statistical mechanics, covering topics spanning from Molecular dynamics to studies of phase transitions, highly relevant for several subdisciplines
  o  Computational Astrophysics and Astronomy
  o  Data analysis and machine learning tailored to physics problems (PA+CSME?)
  o  High-performance computing (CSME)
  o  More...

===== A possible Physics major in computational physics and a possible MSc in Computational Physics =====

To be discussed.
